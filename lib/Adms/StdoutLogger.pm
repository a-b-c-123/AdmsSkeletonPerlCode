#-------------------------------------------------------------------------------
# Package declaration
#-------------------------------------------------------------------------------
package Adms::StdoutLogger;
#-------------------------------------------------------------------------------
# Downloaded from https://github.com/hpham-abc123/AdmsSkeletonPerlCode.git
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Used modules
#-------------------------------------------------------------------------------

use strict;
use warnings;
use POSIX qw/strftime/;

#-------------------------------------------------------------------------------
# Constants
#-------------------------------------------------------------------------------
our $VERSION = '0.01';
our $TRACE = 1;
our $DEBUG = 2;
our $INFO = 3;
our $WARN = 4;
our $ERROR = 5;
our $FATAL = 6;

#-------------------------------------------------------------------------------
# Global variables
#-------------------------------------------------------------------------------
# Private package-level variable to hold the singleton instance
my $instance = undef;
# Set a default level;
my $_level = $INFO;

#-------------------------------------------------------------------------------
# Function: new
#-------------------------------------------------------------------------------
sub new{
    my $class = shift;
    return $instance if defined $instance;
    my $self = {};
    bless $self, $class;
    $instance = $self;
    return $self;
    
}

#-------------------------------------------------------------------------------
# Function: get_logger
#-------------------------------------------------------------------------------
sub get_logger{
  my $class = shift;
  return $instance || $class->new();
}

#-------------------------------------------------------------------------------
# Function: new
#-------------------------------------------------------------------------------
sub level{
    my ($self, $lvl) = @_;
    $_level = $lvl if ( defined $lvl );
    return $_level;
}

#-------------------------------------------------------------------------------
# Function: trace
#-------------------------------------------------------------------------------
sub trace{
    my ($self, $msg ) = @_;
    $self->_post("TRACE", $msg) if ($_level <= $TRACE);
}

#-------------------------------------------------------------------------------
# Function: debug
#-------------------------------------------------------------------------------
sub debug{
    my ($self, $msg ) = @_;
    $self->_post("DEBUG", $msg) if ($_level <= $DEBUG);
}

#-------------------------------------------------------------------------------
# Function: info
#-------------------------------------------------------------------------------
sub info{
    my ($self, $msg ) = @_;
    $self->_post("INFO", $msg) if ($_level <= $INFO);
}

#-------------------------------------------------------------------------------
# Function: warm
#-------------------------------------------------------------------------------
sub warn{
    my ($self, $msg ) = @_;
    $self->_post("WARN", $msg) if ($_level <= $WARN);
}

#-------------------------------------------------------------------------------
# Function: error
#-------------------------------------------------------------------------------
sub error{
    my ($self, $msg ) = @_;
    $self->_post("ERROR", $msg) if ($_level <= $ERROR);
}

#-------------------------------------------------------------------------------
# Function: fatal
#-------------------------------------------------------------------------------
sub fatal{
    my ($self, $msg ) = @_;
    $self->_post("FATAL", $msg) if ($_level <= $FATAL);
}

#-------------------------------------------------------------------------------
# Function: _post
#-------------------------------------------------------------------------------
sub _post{
    my ($self, $type, $msg ) = @_;
    my $ctime = strftime('%Y/%m/%d %H:%M:%S', localtime);
    print("$ctime\t$type>\t$msg\n");
}

# Module success
1;
